apiVersion: v1
kind: Namespace
metadata:
  name: hasbase-controller
---
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod-issuer
spec:
  acme:
    email: $USER_EMAIL
    server: https://acme-v02.api.letsencrypt.org/directory
    privateKeySecretRef:
      name: letsencrypt-prod-cert
    solvers:
      - http01:
          ingress:
            ingressClassName: nginx
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: jenkins-pvc-claim
  namespace: hasbase-controller
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  storageClassName: local-path
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: jenkins-pvc-claim2
  namespace: hasbase-controller
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  storageClassName: local-path  
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: hasbase-controller
  name: hasbase-controller-wrapper
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: hasbase-controller-wrapper
      app.kubernetes.io/part-of: hasbase-controller
  template:
    metadata:
      labels:
        app.kubernetes.io/name: hasbase-controller-wrapper
        app.kubernetes.io/part-of: hasbase-controller
    spec:
      containers:
      - name: hasbase-wrapper
        image: hasbase/wrapper:latest
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 8000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: hasbase-controller
  name: hasbase-controller-jenkins
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: hasbase-controller-jenkins
      app.kubernetes.io/part-of: hasbase-controller
  template:
    metadata:
      labels:
        app.kubernetes.io/name: hasbase-controller-jenkins
        app.kubernetes.io/part-of: hasbase-controller
    spec:
      containers:
      - name: jenkins-builder
        image: hasbase/builder:latest
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 8080
        - name: jnlp
          containerPort: 50000
        env:
        - name: JENKINS_ADMIN_ID
          value: hasbase
        - name: JENKINS_ADMIN_PASSWORD
          value: hasbase876
        volumeMounts:
        - name: jenkins-jobs
          mountPath: /var/jenkins_home/jobs
        - name: jenkins-builds
          mountPath: /var/jenkins_home/builds
        - name: docker-sock
          mountPath: /var/run/docker.sock
      volumes:
        - name: jenkins-jobs
          persistentVolumeClaim:
            claimName: jenkins-pvc-claim 
        - name: jenkins-builds
          persistentVolumeClaim:
            claimName: jenkins-pvc-claim2
        - name: docker-sock
          hostPath:
            path: /var/run/docker.sock
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hasbase-registry
  namespace: hasbase-controller
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: hasbase-registry
      app.kubernetes.io/part-of: hasbase-controller
  template:
    metadata:
      labels:
        app.kubernetes.io/name: hasbase-registry
        app.kubernetes.io/part-of: hasbase-controller
    spec:
      containers:
        - name: docker-registry
          image: registry:2.6.2
          env:
            - name: REGISTRY_HTTP_ADDR
              value: ":5000"
            - name: REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY
              value: "/var/lib/registry"
          ports:
          - name: http
            containerPort: 5000
          volumeMounts:
          - name: image-store
            mountPath: "/var/lib/registry"
      volumes:
        - name: image-store
          emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  namespace: hasbase-controller
  name: hasbase-wrapper-service
spec:
  type: NodePort
  selector:
    app.kubernetes.io/name: hasbase-controller-wrapper
    app.kubernetes.io/part-of: hasbase-controller
  ports:
    - name: http
      protocol: TCP
      port: 8000
      targetPort: 8000
      nodePort: 31000
---
apiVersion: v1
kind: Service
metadata:
  namespace: hasbase-controller
  name: hasbase-jenkins-service
spec:
  type: NodePort
  selector:
    app.kubernetes.io/name: hasbase-controller-jenkins
    app.kubernetes.io/part-of: hasbase-controller
  ports:
    - name: http
      protocol: TCP
      port: 8080
      targetPort: 8080
      nodePort: 31080      
---
apiVersion: v1
kind: Service
metadata:
  namespace: hasbase-controller
  name: hasbase-registry-service
spec:
  type: NodePort
  selector:
    app.kubernetes.io/name: hasbase-registry
    app.kubernetes.io/part-of: hasbase-controller
  ports:
    - name: http
      protocol: TCP
      port: 5000
      targetPort: 5000
      nodePort: 31500
---
apiVersion: v1
kind: Namespace
metadata:
  name: hasbase-apps